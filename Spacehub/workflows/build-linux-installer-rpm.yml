name: ðŸ“¦ðŸš€ Build Installer - Linux RPM AMD64

on:
  workflow_dispatch:
  push:
    branches:
      - 'long_lived/**'
      - main
      - 'release/**'
    tags:
        - '**'
  pull_request:
    branches:
      - '**'

concurrency:
  # SHA is added to the end if on `main` to let all main workflows run
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.event_name }}-${{ (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/long_lived/')) && github.sha || '' }}
  cancel-in-progress: true

jobs:
  build:
    name: Linux amd64 RPM Installer
    runs-on: ubuntu-latest
    container:
      image: chainetwork/centos7-builder:latest
    timeout-minutes: 40
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.9]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: recursive

    - uses: chain-Network/actions/git-ssh-to-https@main

    - name: Cleanup any leftovers that exist from previous runs
      run: bash build_scripts/clean-runner.sh || true

    - uses: chain-Network/actions/enforce-semver@main
      if: startsWith(github.ref, 'refs/tags/')

    # Create our own venv outside of the git directory JUST for getting the ACTUAL version so that install can't break it
    - name: Get version number
      id: version_number
      run: |
        python3 -m venv ../venv
        . ../venv/bin/activate
        pip3 install setuptools_scm
        echo "::set-output name=chain_INSTALLER_VERSION::$(python3 ./build_scripts/installer-version.py)"
        deactivate

    - name: Test for secrets access
      id: check_secrets
      shell: bash
      run: |
        unset HAS_SECRET
        if [ -n "$SECRET" ]; then HAS_SECRET='true' ; fi
        echo ::set-output name=HAS_SECRET::${HAS_SECRET}
      env:
        SECRET: "${{ secrets.INSTALLER_UPLOAD_SECRET }}"

      # Get the most recent release from chain-plotter-madmax
    - uses: actions/github-script@v6
      id: 'latest-madmax'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'chain-Network',
            repo: 'chain-plotter-madmax',
          });
          return release.data.tag_name;

    - name: Get latest madmax plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/madmax"
        wget -O "$GITHUB_WORKSPACE/madmax/chain_plot" https://github.com/chain-Network/chain-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chain_plot-${{ steps.latest-madmax.outputs.result }}-x86-64
        wget -O "$GITHUB_WORKSPACE/madmax/chain_plot_k34" https://github.com/chain-Network/chain-plotter-madmax/releases/download/${{ steps.latest-madmax.outputs.result }}/chain_plot_k34-${{ steps.latest-madmax.outputs.result }}-x86-64
        chmod +x "$GITHUB_WORKSPACE/madmax/chain_plot"
        chmod +x "$GITHUB_WORKSPACE/madmax/chain_plot_k34"

      # Get the most recent release from bladebit
    - uses: actions/github-script@v6
      id: 'latest-bladebit'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        result-encoding: string
        script: |
          const release = await github.rest.repos.getLatestRelease({
            owner: 'chain-Network',
            repo: 'bladebit',
          });
          return release.data.tag_name;

    - name: Get latest bladebit plotter
      run: |
        mkdir "$GITHUB_WORKSPACE/bladebit"
        wget -O /tmp/bladebit.tar.gz https://github.com/chain-Network/bladebit/releases/download/${{ steps.latest-bladebit.outputs.result }}/bladebit-${{ steps.latest-bladebit.outputs.result }}-centos-x86-64.tar.gz
        tar -xvzf /tmp/bladebit.tar.gz -C $GITHUB_WORKSPACE/bladebit
        chmod +x "$GITHUB_WORKSPACE/bladebit/bladebit"

    - uses: ./.github/actions/install
      with:
        python-version: ${{ matrix.python-version }}
        development: true

    - uses: chain-network/actions/activate-venv@main

    - name: Build .rpm package
      env:
        chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
        ldd --version
        git -C ./chain-blockchain-gui status
        cd ./build_scripts
        bash build_linux_rpm.sh amd64

    - name: Upload Linux artifacts
      uses: actions/upload-artifact@v3
      with:
        name: chain-installers-linux-rpm-intel
        path: ${{ github.workspace }}/build_scripts/final_installer/

    - name: Configure AWS Credentials
      if: steps.check_secrets.outputs.HAS_SECRET
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.INSTALLER_UPLOAD_KEY }}
        aws-secret-access-key: ${{ secrets.INSTALLER_UPLOAD_SECRET }}
        aws-region: us-west-2

    - name: Upload to s3
      if: steps.check_secrets.outputs.HAS_SECRET
      env:
          chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
          GIT_SHORT_HASH=$(echo "${GITHUB_SHA}" | cut -c1-8)
          chain_DEV_BUILD=${chain_INSTALLER_VERSION}-$GIT_SHORT_HASH
          echo "chain_DEV_BUILD=$chain_DEV_BUILD" >>$GITHUB_ENV
          ls $GITHUB_WORKSPACE/build_scripts/final_installer/
          aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/dev/chain-blockchain-${chain_DEV_BUILD}-1.x86_64.rpm
          aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/dev/chain-blockchain-cli-${chain_DEV_BUILD}-1.x86_64.rpm

    - name: Create Checksums
      if: startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/main'
      env:
        chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256
        sha256sum $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm > $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256
        ls $GITHUB_WORKSPACE/build_scripts/final_installer/

    - name: Create .rpm torrent
      if: startsWith(github.ref, 'refs/tags/')
      env:
        chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
        py3createtorrent -f -t udp://tracker.opentrackr.org:1337/announce $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm -o $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm.torrent --webseed https://download.chain.net/install/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm
        py3createtorrent -f -t udp://tracker.opentrackr.org:1337/announce $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm -o $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm.torrent --webseed https://download.chain.net/install/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm
        ls

    - name: Upload Dev Installer
      if: steps.check_secrets.outputs.HAS_SECRET && github.ref == 'refs/heads/main'
      env:
        chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/latest-dev/chain-blockchain-1.x86_64_latest_dev.rpm
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256 s3://download.chain.net/latest-dev/chain-blockchain-1.x86_64_latest_dev.rpm.sha256
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/latest-dev/chain-blockchain-cli-1.x86_64_latest_dev.rpm
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256 s3://download.chain.net/latest-dev/chain-blockchain-cli-1.x86_64_latest_dev.rpm.sha256

    - name: Upload Release Files
      if: steps.check_secrets.outputs.HAS_SECRET && startsWith(github.ref, 'refs/tags/')
      env:
        chain_INSTALLER_VERSION: ${{ steps.version_number.outputs.chain_INSTALLER_VERSION }}
      run: |
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/install/
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256 s3://download.chain.net/install/
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-${chain_INSTALLER_VERSION}-1.x86_64.rpm.torrent s3://download.chain.net/torrents/
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm s3://download.chain.net/install/
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm.sha256 s3://download.chain.net/install/
        aws s3 cp $GITHUB_WORKSPACE/build_scripts/final_installer/chain-blockchain-cli-${chain_INSTALLER_VERSION}-1.x86_64.rpm.torrent s3://download.chain.net/torrents/

    - name: Get tag name
      if: startsWith(github.ref, 'refs/tags/')
      id: tag-name
      run: |
          echo "::set-output name=TAG_NAME::$(echo ${{ github.ref }} | cut -d'/' -f 3)"
          echo "::set-output name=REPO_NAME::$(echo ${{ github.repository }} | cut -d'/' -f 2)"

    - name: Mark installer complete
      if: startsWith(github.ref, 'refs/tags/')
      run: |
          curl -s -XPOST -H "Authorization: Bearer ${{ secrets.GLUE_ACCESS_TOKEN }}" --data '{"chain_ref": "${{ steps.tag-name.outputs.TAG_NAME }}"}' ${{ secrets.GLUE_API_URL }}/api/v1/${{ steps.tag-name.outputs.REPO_NAME }}/${{ steps.tag-name.outputs.TAG_NAME }}/success/build-linux-rpm
